allprojects {
    group = 'org.jetbrains.kotlinx'
    version = '0.18-SNAPSHOT'
}

buildscript {
    ext.kotlin_version = '1.1.50'
    ext.junit_version = '4.12'
    ext.atomicFU_version = '0.7-SNAPSHOT'
    ext.dokka_version = '0.9.15'
    repositories {
        jcenter()
        mavenLocal() //TODO: remove
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicFU_version"
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'kotlinx-atomicfu'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    kotlin.experimental.coroutines "enable"

    dokka {
        ext.core_docs_url = 'https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/'
        ext.core_docs_file = "${rootProject.projectDir}/core/kotlinx-coroutines-core/build/dokka/kotlinx-coroutines-core/package-list"
        linkMapping {
            dir = "$projectDir/src/main/kotlin"
            url = "http://github.com/kotlin/kotlinx.coroutines/tree/master/${project.name}/src/main/kotlin"
            suffix = "#L"
        }
        includes = ['README.md']
        outputFormat = 'kotlin-website'
        jdkVersion = 8
    }

    test.testLogging.showStandardStreams = true

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        archives sourcesJar
    }

    repositories {
        mavenLocal() //TODO: remove
        jcenter()
        maven { url "http://jcenter.bintray.com" }
        maven { url "http://kotlin.bintray.com/kotlinx" }
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://dl.bintray.com/devexperts/Maven/" }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

        testCompile "junit:junit:$junit_version"
    }
}

ext.skipClassesTransformation = { projectName ->
    return ['benchmarks', 'knit', 'site'].contains(projectName) || projectName.startsWith('kotlinx-coroutines-debug')
}

subprojects {
    if (!skipClassesTransformation(it.name)) { //FIXME
        println("configure transformer dependencies for $name")
        dependencies {
            compileOnly "org.jetbrains.kotlinx:atomicfu:$atomicFU_version"

            testCompileOnly "org.jetbrains.kotlinx:atomicfu:$atomicFU_version"
            testRuntime "org.jetbrains.kotlinx:atomicfu:$atomicFU_version"
            testCompile project(':kotlinx-coroutines-debug-transformer')
            testCompile project(':kotlinx-coroutines-debug-manager')
        }
    }
}

subprojects {

    if (skipClassesTransformation(project.name)) return

    def CLASSES_AFTER_ATOMICFU_TRANSFORM = file("$buildDir/classes-atomicfu/main")
    def MAIN_CLASSES_AFTER_DEBUGGER_TRANSFORM = file("$buildDir/classes-debuggable/main")
    def TEST_CLASSES_AFTER_DEBUGGER_TRANSFORM = file("$buildDir/classes-debuggable/test")
    def CLEAR_CLASSES_MAIN = sourceSets.main.output.classesDirs
    def CLEAR_CLASSES_TEST = sourceSets.test.output.classesDirs

    atomicFU {
        inputFiles = CLEAR_CLASSES_MAIN
        outputDir = CLASSES_AFTER_ATOMICFU_TRANSFORM
        classPath = sourceSets.main.runtimeClasspath
    }
    atomicFU.dependsOn compileKotlin
    testClasses.dependsOn atomicFU
    jar.dependsOn atomicFU //FIXME

    task debuggerTransformMain(type: JavaExec) {
        classpath = sourceSets.test.compileClasspath
        main = 'kotlinx.coroutines.debug.transformer.CoroutinesDebugTransformerKt'
        args CLASSES_AFTER_ATOMICFU_TRANSFORM, MAIN_CLASSES_AFTER_DEBUGGER_TRANSFORM
    }

    task debuggerTransformTest(type: JavaExec) {
        classpath = sourceSets.test.compileClasspath
        main = 'kotlinx.coroutines.debug.transformer.CoroutinesDebugTransformerKt'
        args CLEAR_CLASSES_TEST.files.join(";"), TEST_CLASSES_AFTER_DEBUGGER_TRANSFORM
    }

    debuggerTransformMain.dependsOn classes
    debuggerTransformTest.dependsOn testClasses

    task generateDebuggableJar(type: Jar) {
        classifier = 'debuggable'
        dependsOn debuggerTransformMain
        from files(MAIN_CLASSES_AFTER_DEBUGGER_TRANSFORM, sourceSets.main.output.resourcesDir)
    }

    jar {
        from files(CLASSES_AFTER_ATOMICFU_TRANSFORM, sourceSets.main.output.resourcesDir)
    }

    configurations {
        debuggable {
            transitive = true
        }
    }

    artifacts {
        debuggable generateDebuggableJar
    }

    test {
        classpath = files(configurations.testRuntime, CLASSES_AFTER_ATOMICFU_TRANSFORM, CLEAR_CLASSES_TEST,
                sourceSets.main.output.resourcesDir)
    }


    task testWithDebugger(type: Test) {
        dependsOn generateDebuggableJar

        dependsOn configurations.debuggable
        doFirst {
            def externalDependencies = configurations.testRuntime.allDependencies.matching {
                !(it instanceof ProjectDependency)
            }

            def externalFiles = configurations.testRuntime.files(*externalDependencies.toArray())

            def projectCompileDeps = configurations.compile.allDependencies.matching { it instanceof ProjectDependency }
            def testCompileDeps = configurations.testCompile.allDependencies

            def testCompileFiles = configurations.testCompile.files(*testCompileDeps.toArray())
            def projectCompileFiles = configurations.compile.files(*projectCompileDeps.toArray())
            def testCompileOnlyFiles = testCompileFiles - projectCompileFiles

            classpath = files(testCompileOnlyFiles, externalFiles, configurations.debuggable, generateDebuggableJar,
                    TEST_CLASSES_AFTER_DEBUGGER_TRANSFORM)

            testLogging {
                events "passed", "skipped", "failed"
            }

            //include "**/RunTest**"
//                filter {
//                    includeTestsMatching "kotlinx.coroutines.experimental.RunTest.testSameContextWithSuspend"
//                }
            systemProperty "debug-agent-enabled", true
            systemProperty "dumps-directory", TEST_CLASSES_AFTER_DEBUGGER_TRANSFORM
        }
    }
    testWithDebugger.dependsOn(debuggerTransformMain, debuggerTransformTest)

}

configure(subprojects.findAll { it.name.startsWith('kotlinx-coroutines-debug') }) {
    test.exclude "**/*"
}

configure(subprojects.findAll { !skipClassesTransformation(it.name) && it.name != 'kotlinx-coroutines-core' }) {
    // 'kotlinx-coroutines-android' project name is lexicographically smaller than 'kotlinx-coroutines-core's,
    // therefore its subprojects {...} clojure evaluated before 'kotlinx-coroutines-core's and
    // can't find sourceSets property of 'kotlinx-coroutines-core'

    dependencies {
        compile project(':kotlinx-coroutines-core')
        //the only way IDEA can resolve test classes
        testCompile project(':kotlinx-coroutines-core').sourceSets.test.output
        testCompile project(':kotlinx-coroutines-debug-test')
        debuggable project(path: ':kotlinx-coroutines-core', configuration: 'debuggable')
    }

    dokka.dependsOn project(':kotlinx-coroutines-core').dokka

    dokka.externalDocumentationLink {
        url = new URL(dokka.core_docs_url)
        packageListUrl = new URL("file://${dokka.core_docs_file}")
    }
}