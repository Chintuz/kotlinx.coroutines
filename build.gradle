allprojects {
    group = 'org.jetbrains.kotlinx'
    version = '0.18-SNAPSHOT'
}

buildscript {
    ext.kotlin_version = '1.1.4-2'
    ext.junit_version = '4.12'
    ext.atomicFU_version = '0.7-SNAPSHOT'
    ext.dokka_version = '0.9.15'
    repositories {
        jcenter()
        mavenLocal() //TODO: remove
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicFU_version"
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'kotlinx-atomicfu'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    kotlin.experimental.coroutines "enable"

    dokka {
        ext.core_docs_url = 'https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/'
        ext.core_docs_file = "${rootProject.projectDir}/core/kotlinx-coroutines-core/build/dokka/kotlinx-coroutines-core/package-list"
        linkMapping {
            dir = "$projectDir/src/main/kotlin"
            url = "http://github.com/kotlin/kotlinx.coroutines/tree/master/${project.name}/src/main/kotlin"
            suffix = "#L"
        }
        includes = ['README.md']
        outputFormat = 'kotlin-website'
        jdkVersion = 8
    }

    test.testLogging.showStandardStreams = true

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        archives sourcesJar
    }

    repositories {
        mavenLocal() //TODO: remove
        jcenter()
        maven { url "http://jcenter.bintray.com" }
        maven { url "http://kotlin.bintray.com/kotlinx" }
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://dl.bintray.com/devexperts/Maven/" }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

        testCompile "junit:junit:$junit_version"
    }
}

ext.skipClassesTransformation = { projectName ->
    return ['benchmarks', 'knit', 'site'].contains(projectName) || projectName.startsWith('kotlinx-coroutines-debug')
}

subprojects {
    if (!skipClassesTransformation(it.name)) {
        println("configure transformer dependencies for $name")
        dependencies {
            compileOnly "org.jetbrains.kotlinx:atomicfu:$atomicFU_version"

            testCompileOnly "org.jetbrains.kotlinx:atomicfu:$atomicFU_version"
            testRuntime "org.jetbrains.kotlinx:atomicfu:$atomicFU_version"
            testCompile project(':kotlinx-coroutines-debug-transformer')
            testCompile project(':kotlinx-coroutines-debug-manager')
        }
    }
}

subprojects {
    afterEvaluate { project ->

        sourceSets {
            custom {

            }
        }

        task foo {
            doLast {
                //println("compileKotlin.output =${compileKotlin.destinationDir}")
                println("customSourseSet = ${sourceSets.custom.output.getClass()}")
                println("sourceSets.custom.output.getClassesDirs()")
                sourceSets.custom.output.getClassesDirs().each {println(it)}
                println("------------")
            }
        }

        if (skipClassesTransformation(project.name)) return

        ext.CLASSES_AFTER_ATOMICFU_TRANSFORM = file("$buildDir/classes-atomicfu/main")
        ext.MAIN_CLASSES_AFTER_DEBUGGER_TRANSFORM = file("$buildDir/classes-debuggable/main")
        ext.TEST_CLASSES_AFTER_DEBUGGER_TRANSFORM = file("$buildDir/classes-debuggable/test")
        ext.CLEAR_CLASSES_MAIN = compileKotlin.destinationDir
        ext.CLEAR_CLASSES_TEST = compileTestKotlin.destinationDir

        atomicFU {
            inputDir = CLEAR_CLASSES_MAIN
            outputDir = CLASSES_AFTER_ATOMICFU_TRANSFORM
            classPath = sourceSets.main.runtimeClasspath.asPath.split(":")//FIXME?
        }
        atomicFU.dependsOn compileKotlin
        testClasses.dependsOn atomicFU

        task debuggerTransformMain(type: JavaExec) {
            classpath = sourceSets.test.compileClasspath
            main = 'kotlinx.coroutines.debug.transformer.CoroutinesDebugTransformerKt'
            args CLEAR_CLASSES_MAIN, MAIN_CLASSES_AFTER_DEBUGGER_TRANSFORM
        }

        task debuggerTransformTest(type: JavaExec) {
            classpath = sourceSets.test.compileClasspath
            main = 'kotlinx.coroutines.debug.transformer.CoroutinesDebugTransformerKt'
            args CLEAR_CLASSES_TEST, TEST_CLASSES_AFTER_DEBUGGER_TRANSFORM
        }

        debuggerTransformMain.dependsOn compileKotlin
        debuggerTransformTest.dependsOn compileTestKotlin

        sourceSets {
            transformed {
                println("sourceSets.transformed configureation for ${project.name}: CLASSES_AFTER_ATOMICFU_TRANSFORM = $CLASSES_AFTER_ATOMICFU_TRANSFORM")
                compileClasspath = sourceSets.main.compileClasspath
                runtimeClasspath = sourceSets.main.runtimeClasspath
                output.classesDir = CLASSES_AFTER_ATOMICFU_TRANSFORM
                output.resourcesDir = sourceSets.main.output.resourcesDir
            }
        }

        jar {
            from sourceSets.transformed.output
        }

        ext.replaceMainClassPathWithTransformed = { filesList, transformed ->
            def index = filesList.findIndexOf { it == sourceSets.main.output.classesDir }
            def list = filesList.toList()
            list.set(index, transformed)
            return files(list)
        }

        test {
            classpath = replaceMainClassPathWithTransformed(classpath, CLASSES_AFTER_ATOMICFU_TRANSFORM)
        }

        task testWithDebugger(type: Test) {
            classpath = replaceMainClassPathWithTransformed(classpath, "$buildDir/classes-debuggable/main")
            testClassesDirs = files(file(TEST_CLASSES_AFTER_DEBUGGER_TRANSFORM))

            testLogging {
                events "passed", "skipped", "failed"
            }

            //include "**/RunTest**"
            filter {
                includeTestsMatching "kotlinx.coroutines.experimental.RunTest.testSameContextWithSuspend"
            }
            systemProperty "debug-agent-enabled", true
            systemProperty "dumps-directory", TEST_CLASSES_AFTER_DEBUGGER_TRANSFORM
        }
        testWithDebugger.dependsOn(debuggerTransformMain, debuggerTransformTest)
    }
}

configure(subprojects.findAll { it.name.startsWith('kotlinx-coroutines-debug') }) {
    test.exclude "**/*"
}

configure(subprojects.findAll { !skipClassesTransformation(it.name) && it.name != 'kotlinx-coroutines-core' }) {
    // 'kotlinx-coroutines-android' project name is lexicographically smaller than 'kotlinx-coroutines-core's,
    // therefore its subprojects {...} clojure evaluated before 'kotlinx-coroutines-core's and
    // can't find sourceSets property of 'kotlinx-coroutines-core'
    dependencies {
        compile project(':kotlinx-coroutines-core')
        //the only way IDEA can resolve test classes
        testCompile project(':kotlinx-coroutines-core').sourceSets.test.output
    }

    dokka.dependsOn project(':kotlinx-coroutines-core').dokka

    dokka.externalDocumentationLink {
        url = new URL(dokka.core_docs_url)
        packageListUrl = new URL("file://${dokka.core_docs_file}")
    }
}